params[["_mode","",[""]],["_item","",["",[]]],["_quantity",-1,[0]]];_quantity=round _quantity;if(_mode isEqualTo""||_item isEqualTo""||_quantity isEqualTo-1||!life_session_completed) exitWith{};if(_mode isEqualTo"spawnLootChest") exitWith{private _lootData=profileNamespace getVariable["ga_questChestLootArray",[]];if!(_lootData isEqualTo[]) then{_lootData params["_sessionID","_asy_pos","_virtualArray","_PhysArray","_questID","_serverTime"];if!(_questID in life_completedLifetimeQuests) exitWith{profileNamespace setVariable["ga_questChestLootArray",[]]};[_asy_pos,_virtualArray,_PhysArray,_questID,true]spawn life_fnc_createQuestLoot;};};private _antiCheese={params["_questID"];private _exit=false;private _cooldown=(["getQuestRowByID",_questID]call life_fnc_questsCfg) select 5;if(_cooldown isEqualTo 0) exitWith{_exit};private _index=life_questAntiCheese findIf{_questID isEqualTo(_x select 0)};if(_index isEqualTo-1) then{life_questAntiCheese pushBack[_questID,(time+_cooldown)];}else{if((life_questAntiCheese select _index) select 1<time) then{life_questAntiCheese deleteAt _index;life_questAntiCheese pushBack[_questID,(time+_cooldown)];}else{["Your previous action did not count towards quest completion due to being too recent to your last action towards the quest.","basic"]spawn life_fnc_handleMessage;_exit=true;};};_exit};private _updateLifetimeProgress={params["_questID","_quantity"];if([_questID]call _antiCheese) exitWith{};if(life_LifetimeProgressQuests isEqualTo[]) then{life_LifetimeProgressQuests pushBack[_questID,_quantity];}else{private _index=life_LifetimeProgressQuests findIf{_questID isEqualTo(_x select 0)};if(_index isEqualTo-1) then{life_LifetimeProgressQuests pushBack[_questID,_quantity];}else{(life_LifetimeProgressQuests select _index) set[1,((life_LifetimeProgressQuests select _index) select 1)+_quantity];};};};private _updateNonLifetimeProgress={params["_mode","_quantity"];if(life_questProgress isEqualTo[]) then{life_questProgress pushBack[_mode,_quantity];}else{private _index=life_questProgress findIf{_mode isEqualTo(_x select 0)};if(_index isEqualTo-1) then{life_questProgress pushBack[_mode,_quantity];}else{(life_questProgress select _index) set[1,((life_questProgress select _index) select 1)+_quantity];};};};private _isQuestComplete={params["_id"];if(_id in life_completedLifetimeQuests) exitWith{true};private _questType=(["getQuestRowByID",_id]call life_fnc_questsCfg) param[2,-1];private _isLifetime=if(_questType==2) then{true}else{false};private _requirements=["getRequirementsByID",_id]call life_fnc_questsCfg;private _allMet=true;if!(_isLifetime) then{{_x params["_reqType","_reqItem","_reqQty"];private _index=life_questProgress findIf{_reqType isEqualTo(_x select 0)};if(_index isEqualTo-1) then{_allMet=false;}else{if((life_questProgress select _index) select 1<_reqQty) then{_allMet=false;};};}forEach _requirements;}else{private _index=life_LifetimeProgressQuests findIf{_id isEqualTo(_x select 0)};private _curQty=(life_LifetimeProgressQuests select _index) select 1;private _reqQty=(_requirements select 0) select 2;if!(_index isEqualTo-1) then{if(_curQty>=_reqQty) then{life_completedLifetimeQuests pushBackUnique _id;life_LifetimeProgressQuests deleteAt _index;}else{_allMet=false;};};};_allMet;};private _handleQuestComplete={params["_questID"];private _questData=["getQuestRowByID",_questID]call life_fnc_questsCfg;private _questReward=_questData param[6,[]];if!(_questReward isEqualTo[]) then{if!((_questReward select 0)==0) then{life_bloodMoney=life_bloodMoney+(_questReward select 0);[18]call life_fnc_ClupdatePartial;[format["You were awarded %1 BM for your quest completion",[(_questReward select 0)]call life_fnc_numberText],"basic"]spawn life_fnc_handleMessage;